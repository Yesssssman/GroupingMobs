buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'


version = '1.0.0'
group = 'com.yesman.grouping_mobs'
archivesBaseName = 'grouping_mobs'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.18.2'
    
    runs {
        client {
            workingDirectory project.file('run')
			
            property 'forge.logging.markers', 'REGISTRIES'
			
            property 'forge.logging.console.level', 'debug'
			
            property 'forge.enabledGameTestNamespaces', 'grouping_mobs'

            mods {
                grouping_mobs {
                    source sourceSets.main
                }
            }
        }
		
        server {
            workingDirectory project.file('run')
			
            property 'forge.logging.markers', 'REGISTRIES'
			
            property 'forge.logging.console.level', 'debug'
			
            property 'forge.enabledGameTestNamespaces', 'grouping_mobs'
			
            mods {
                grouping_mobs {
                    source sourceSets.main
                }
            }
        }
		
        gameTestServer {
            workingDirectory project.file('run')
			
            property 'forge.logging.markers', 'REGISTRIES'
			
            property 'forge.logging.console.level', 'debug'
			
            property 'forge.enabledGameTestNamespaces', 'grouping_mobs'
			
            mods {
                grouping_mobs {
                    source sourceSets.main
                }
            }
        }
		
        data {
            workingDirectory project.file('run')
			
            property 'forge.logging.markers', 'REGISTRIES'
			
            property 'forge.logging.console.level', 'debug'
			
            args '--mod', 'grouping_mobs', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			
            mods {
                grouping_mobs {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.80'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "grouping_mobs",
                "Specification-Vendor"    : "grouping_mobssareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "grouping_mobssareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
